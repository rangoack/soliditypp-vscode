// SPDX-License-Identifier: MIT
pragma soliditypp ^0.8.0;

import "./ERC721.solpp";
import "./ERC721Enumerable.solpp";
import "./ERC721Burnable.solpp";

contract NFT is ERC721Enumerable, ERC721Burnable {
    uint256 currentTokenId;

    constructor() ERC721("My NFT", "NFT") {}

    function mint(address addr)
        public async
        returns (uint256)
    {
        currentTokenId += 1;
        _mint(addr, currentTokenId);

        return currentTokenId;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 _tokenId
    ) internal virtual override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, _tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        async
        view
        virtual
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}

