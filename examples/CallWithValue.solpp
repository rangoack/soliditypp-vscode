// SPDX-License-Identifier: GPL-3.0
// Demostrate how to call a contract and send tokens at the same time.

pragma soliditypp ^0.8.0;

contract A {
   event Received(uint data, address sender, tokenId token, uint amount);

   function f(uint a) external async payable returns(uint) {
      address sender = msg.sender;
      tokenId token = msg.tokenid;
      uint amount = msg.amount;

      emit Received(a, sender, token, amount);
      return a + 1;
   }

   
}

// deploy B with a minimum of 3 VITE to test
contract B {
   A a;

   constructor (address payable addr) payable {
        a = A(addr);
    }

   function test(uint data) external async {
      // send an asynchronous call to a.f() with 1 VITE
      a.f{token: "tti_5649544520544f4b454e6e40", amount: 1 * 10 ** 18}(data);

      // send a synchronous call to a.f() with 2 VITE
      uint b = await a.f{token: "tti_5649544520544f4b454e6e40", amount: 2 * 10 ** 18}(data);
   }
}