{
  "name": "solppdebugger",
  "displayName": "Solidity++ 0.8 Preview",
  "description": "Vite Solidity++ Language for Visual Studio Code",
  "publisher": "ViteLabs",
  "icon": "images/vite256.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/vitelabs/soliditypp-vscode.git"
  },
  "version": "0.3.0-dev",
  "engines": {
    "vscode": "^1.66.0"
  },
  "categories": [
    "Debuggers",
    "Programming Languages"
  ],
  "license": "MIT",
  "keywords": [
    "solidity",
    "soliditypp",
    "solidity++",
    "vite",
    "vitelabs",
    "smart contract"
  ],
  "scripts": {
    "install:all": "npm install && npm --prefix ./webview-ui install ./webview-ui",
    "watch:webview:vue": "npm --prefix ./webview-ui run watch:vue",
    "watch:webview:vite": "npm --prefix ./webview-ui run watch:vite",
    "watch:webview": "npm --prefix ./webview-ui run watch",
    "build:webview": "npm --prefix ./webview-ui run build",
    "vscode:prepublish": "npm run build:webview && npm run compile",
    "build": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run build && npm run lint",
    "lint": "eslint src --ext ts"
  },
  "dependencies": {
    "@vite/vitejs": "^2.3.19-alpha.3",
    "@vite/vuilder": "0.1.0-alpha.16",
    "@vscode/debugadapter": "^1.55.1",
    "bignumber.js": "^9.0.2",
    "websocket": "^1.0.34"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^9.1.1",
    "@types/node": "~14.17.5",
    "@types/vscode": "~1.66.0",
    "@types/websocket": "^1.0.5",
    "@typescript-eslint/eslint-plugin": "^4.14.1",
    "@typescript-eslint/parser": "^4.14.1",
    "@vscode/test-electron": "^2.1.3",
    "eslint": "^7.19.0",
    "glob": "^7.1.6",
    "prettier": "^2.2.1",
    "typescript": "^4.1.3",
    "vscode-test": "^1.5.0"
  },
  "activationEvents": [
    "onView:ContractTreeDataView",
    "onView:ViteNetworkView",
    "onLanguage:soliditypp",
    "onCommand:soliditypp.compile",
    "workspaceContains:*/*.solpp",
    "workspaceContains:*/*.sol"
  ],
  "main": "./out/main.js",
  "contributes": {
    "languages": [
      {
        "id": "soliditypp",
        "extensions": [
          ".solpp",
          ".sol"
        ],
        "aliases": [
          "soliditypp",
          "solidity++"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "soliditypp",
        "scopeName": "source.soliditypp",
        "path": "./syntax/soliditypp.json"
      }
    ],
    "snippets": [
      {
        "language": "soliditypp",
        "path": "./snippets/soliditypp.json"
      }
    ],
    "taskDefinitions": [
      {
        "type": "solppc",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "description": "Custom soliditypp compiler"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Args to be passed to compiler"
          },
          "env": {
            "type": "object",
            "patternProperties": {
              ".+": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string",
            "description": "Task ID"
          }
        }
      }
    ],
    "problemPatterns": [
      {
        "name": "solppc",
        "patterns": [
          {
            "regexp": "^(.*Error.*)$",
            "message": 1
          },
          {
            "regexp": "^.{5}([\\w\\d\\-\\_\\.]+):(\\d+):(\\d+).*$",
            "file": 1,
            "line": 2,
            "column": 3
          }
        ]
      },
      {
        "name": "solppc-json",
        "patterns": [
          {
            "regexp": "^.*\"formattedMessage\":\"(.+).*(\\d+):(\\d+).*severity\":\"(error|warning|warn).*file\":\"(.+)\",.*$",
            "message": 5,
            "file": 2,
            "line": 2,
            "column": 3,
            "severity": 4
          }
        ]
      }
    ],
    "problemMatchers": [
      {
        "name": "solppc",
        "owner": "solppc",
        "source": "solppc",
        "fileLocation": [
          "autoDetect",
          "${workspaceRoot}"
        ],
        "pattern": "$solppc"
      },
      {
        "name": "solppc-json",
        "owner": "solppc",
        "source": "solppc",
        "fileLocation": [
          "autoDetect",
          "${workspaceRoot}"
        ],
        "pattern": "$solppc-json"
      },
      {
        "name": "solppc-watch",
        "owner": "solppc",
        "source": "solppc",
        "fileLocation": [
          "autoDetect",
          "${workspaceRoot}"
        ],
        "background": {
          "beginsPattern": ".",
          "endsPattern": "."
        },
        "pattern": "$solppc"
      }
    ],
    "configuration": {
      "id": "solppc",
      "title": "Soliditypp Compiler",
      "type": "object",
      "properties": {
        "solppdebugger.trace.extension": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable logging of VS Code extensions itself."
        },
        "solppdebugger.solppc.compiler": {
          "type": "string",
          "default": "solppcjs",
          "markdownDescription": "Config compiler program."
        },
        "solppdebugger.solppc.watch": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable compiler watch mode."
        },
        "solppdebugger.solppc.outputSelection": {
          "type": "string",
          "default": "abi,evm.assembly,evm.bytecode,metadata,storageLayout",
          "markdownDescription": "Config compiler `ouputSelection`, Separated by Space or Comma, `*` for all."
        },
        "solppdebugger.console.viewColumn": {
          "type": "string",
          "default": "Beside",
          "enum": [
            "Beside",
            "One",
            "Two",
            "Three",
            "Four"
          ],
          "markdownDescription": "Denotes a location of the Contract Console in the window, `Beside` means to the side of the active editor."
        },
        "solppdebugger.console.viewStyle": {
          "type": "string",
          "default": "Tab",
          "enum": [
            "Tab",
            "Flow"
          ],
          "markdownDescription": "Denotes the Contract Console view style"
        },
        "solppdebugger.vite.localGoViteVersion": {
          "type": "string",
          "default": "v2.11.2",
          "markdownDescription": "Config version of the local Vite node."
        },
        "solppdebugger.vite.localGoViteHttpPort": {
          "type": "number",
          "default": 23456,
          "markdownDescription": "Config Http port of the local Vite node."
        },
        "solppdebugger.vite.localGoViteAutoStart": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Start the local Vite node automatically."
        },
        "solppdebugger.vite.testNet": {
          "type": "string",
          "default": "wss://buidl.vite.net/gvite/ws",
          "markdownDescription": "Config Vite testNet node."
        },
        "solppdebugger.vite.mainNet": {
          "type": "string",
          "default": "wss://node.vite.net/gvite/ws",
          "markdownDescription": "Config Vite mainNet node."
        },
        "solppdebugger.vite.customNodes": {
          "type": "array",
          "default": [],
          "markdownDescription": "Config Custom VITE node. Example: `[{ \"name\": \"\", \"url\": \"\", \"network\": \"\"  }]`"
        }
      }
    },
    "commands": [
      {
        "command": "solppc.enableWatchMode",
        "title": "Enable Compiler Watch Mode",
        "category": "Soliditypp"
      },
      {
        "command": "solppc.disableWatchMode",
        "title": "Disable Compiler Watch Mode",
        "category": "Soliditypp"
      },
      {
        "command": "solppc.compile",
        "title": "Compile",
        "category": "Soliditypp",
        "icon": "$(sync)"
      },
      {
        "command": "contract.open",
        "title": "Open Contract",
        "category": "Soliditypp",
        "icon": "$(go-to-file)"
      },
      {
        "command": "contract.refresh",
        "title": "Refresh",
        "category": "Soliditypp",
        "icon": "$(refresh)"
      },
      {
        "command": "contract.startLocalViteNode",
        "title": "Start A Local Vite Node",
        "category": "Soliditypp"
      },
      {
        "command": "contract.stopLocalViteNode",
        "title": "Stop the Local Vite Node",
        "category": "Soliditypp"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "deploy-view",
          "title": "Contract Explorer",
          "icon": "assets/vite.svg"
        }
      ]
    },
    "views": {
      "deploy-view": [
        {
          "id": "ContractTreeDataView",
          "name": "CONTRACTS LIST",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "ViteContractDeploymentView",
          "name": "Contract Deployment",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "ViteWalletView",
          "name": "Wallet",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "ViteNetworkView",
          "name": "Network",
          "type": "webview",
          "visibility": "visible"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "ContractTreeDataView",
        "contents": "No contract file found!"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "contract.refresh",
          "when": "view == ContractTreeDataView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "solppc.compile",
          "when": "view == ContractTreeDataView && viewItem == ContractSource",
          "group": "inline"
        },
        {
          "command": "contract.open",
          "when": "view == ContractTreeDataView && viewItem == ContractCompileError",
          "group": "inline"
        }
      ]
    }
  }
}
